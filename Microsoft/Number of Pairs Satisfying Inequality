class Solution:
    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:
        n=len(nums1)
        nums=[nums1[i]-nums2[i] for i in range(n)]
        nums.reverse()                                       
        ans=0
        def mergeSort(nums,low,high):
            if (low>=high):
                return 0
            mid=low+(high-low)//2
            inv=mergeSort(nums,low,mid)
            inv+=mergeSort(nums,mid+1,high)
            inv+=merge(nums,low,mid,high)
            return inv
        def merge(nums,low,mid,high):
            count=0
            j=mid+1
            for i in range(low,mid+1):
                while (j<=high and nums[i]>=nums[j]-diff):           
                    j+=1
                count+=(j-mid-1)
            temp=[]
            left,right=low,mid+1
            while(left<=mid and right<=high):
                if nums[left]<=nums[right]:
                    temp.append(nums[left])
                    left+=1
                else:
                    temp.append(nums[right])
                    right+=1
            while (left<=mid):
                temp.append(nums[left])
                left+=1
            while(right<=high):
                temp.append(nums[right])
                right+=1
            nums[low:high+1]=temp
            return count
        return mergeSort(nums,0,len(nums)-1)
