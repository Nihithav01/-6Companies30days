class Solution:
    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:
        m, n = len(grid), len(grid[0])
        dp = [[[0, 0]] * (n+2) for _ in range(m+2)]
        ans = []
        for i in range(1, m+1):
            for j in range(1, n+1):                      
                ans.append(grid[i-1][j-1])
                dp[i][j] = [grid[i-1][j-1], grid[i-1][j-1]]
                dp[i][j][0] += dp[i-1][j-1][0]                 
                dp[i][j][1] += dp[i-1][j+1][1]               
                for win in range(1, min(m, n)):
                    x1, y1 = i-win, j-win                      
                    x2, y2 = i-win, j+win                      
                    x3, y3 = i-win-win, j                      
                    if not (all(1 <= x < m+1 for x in [x1, x2, x3]) and all(1 <= y < n+1 for y in [y1, y2, y3])):
                        break
                    b2l = dp[i][j][0] - dp[x1-1][y1-1][0]      
                    b2r = dp[i][j][1] - dp[x2-1][y2+1][1]      
                    l2t = dp[x1][y1][1] - dp[x3-1][y3+1][1]   
                    r2t = dp[x2][y2][0] - dp[x3-1][y3-1][0]    
                    vertices_sum = grid[i-1][j-1] + grid[x1-1][y1-1] + grid[x2-1][y2-1] + grid[x3-1][y3-1]
                    cur = b2l + b2r + l2t + r2t - vertices_sum 
                    ans.append(cur)
        return sorted(set(ans), reverse=True)[:3]       
